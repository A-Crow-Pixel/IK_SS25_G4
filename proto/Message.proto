syntax = "proto3";
////////////////////////////////////////////////////////////////////////////////////////////////

message User {
    string userId = 1; string serverId = 2;
}

message Group {
    string groupId = 1; string serverId = 2;
}


message DiscoverServer{

}

message ServerAnnounce {
    string serverId = 1;
    message Feature {
        string featureName = 1;
        uint32 port = 2;
    }
    repeated Feature feature = 2;
}

message ConnectClient { User user = 1; }


message ConnectServer {
    string serverId = 1; repeated string features = 2;
}

message ConnectResponse {
    enum Result {
        UNKNOWN_ERROR = 0;
        CONNECTED = 1;
        IS_ALREADY_CONNECTED_ERROR = 2;
    }
    Result result = 1;
}

message HangUp {
    enum Reason {
        UNKNOWN_REASON = 0;
        EXIT = 1;
        TIMEOUT = 2;
        PAYLOAD_LIMIT_EXCEEDED = 3; // ex. 2mb payload
        MESSAGE_MALFORMED = 4; // ex. parse fail
    }
    Reason reason = 1;
 }



 message Ping{

 }

 message Pong{

 }
 ////////////////////////////////////////////////////////


message UnsupportedMessageNotification {
    string message_name = 1;
 }

message ChatMessage {
    uint64 messageSnowflake = 1;

    User author = 2;

    message UserOfGroup {
        User user = 1; Group group = 2;
    }
    oneof recipient {
        User user = 3;
        Group group = 4;
        UserOfGroup userOfGroup = 5;
    };
    reserved 6 to 10;


    oneof content {
        string textContent = 11;
        ///Document document = 12;
        LiveLocation live_location = 22;
        Translation translation = 44;
    }
}



message ChatMessageResponse {
    uint64 messageSnowflake = 1;
    enum Status {
        UNKNOWN_STATUS = 0;
        DELIVERED = 2;
        OTHER_ERROR = 3;
        USER_AWAY = 4;
        USER_NOT_FOUND = 5;
        OTHER_SERVER_TIMEOUT = 6;
        OTHER_SERVER_NOT_FOUND = 7;
        USER_BLOCKED = 8;
    }
    message DeliveryStatus {
        User user = 1;
        Status status = 2;
    }
    repeated DeliveryStatus statuses = 2;
}




/////////////////////feature:contacts//////////////////////////
message QueryUsers {
    uint64 handle = 1;
    string query = 2;
}

message QueryUsersResponse {
    uint64 handle = 1;
    repeated User users = 2;
}
///////////////////////////////////////////////////////

message ModifyGroup {
    uint64 handle = 1;
    string groupId = 2;
    bool deleteGroup = 3;
    string displayName = 4;
    repeated User admins = 5;
}


message ModifyGroupResponse {
    uint64 handle = 1;
    enum Result {
        UNKNOWN_ERROR = 0;
        SUCCESS = 1;
        NOT_PERMITTED = 2;
    };
    Result result = 2;
}


message InviteToGroup {
    uint64 handle = 1;
    string groupId = 2;
    User user = 3;
}



message NotifyGroupInvite {
    uint64 handle = 1;
    Group group = 2;
}

message JoinGroup {
    uint64 handle = 1;
    Group group = 2;
    User user = 3;
}


message LeaveGroup {
    Group group = 1;
    User user = 2;
}



message ListGroupMembers {
    Group group = 1;
}



message GroupMembers {
    Group group = 1;
    enum Result {
        UNKNOWN_ERROR = 0;
        SUCCESS = 1;
        NOT_FOUND = 2;
    }
    Result result = 2;
    repeated User user = 3;
}

/////////////////////////////////////////////////

enum Language {
    DE = 0; // German
    EN = 1; // English
    ZH = 2; // Chinese
    TR = 3; //Turkish
  }

message Translation {

  Language target_language = 1;

    // The original text to be translated (client → other server → Our server).
    string original_text = 2;

    // The translated text (Our server → other server → client).
    optional string translated_text = 3;
  }





message Translate {
  Language target_language = 1;
  string original_text = 2;
  optional string translated_text = 3;
}


message Translated {
  Language target_language = 1;
  string original_text = 2;
  optional string translated_text = 3;
}










message SetReminder {
    User user = 1;  
    string event = 2;  // ex. “Time to go to bed”
    uint32 countdownSeconds = 3;   // ex. 60 for 1 minute
}

message Reminder {
    User user = 1;
    string reminderContent = 2;    
}

////////////////////////////////////////Group 2///////////////////////////////
message LiveLocation {
    User user = 1;
    double timestamp = 2;
    double expiry_at = 3;
    message Location {
        double latitude = 1;
        double longitude = 2;
    };
    Location location = 4;
}

message LiveLocations {
    message ExtendedLiveLocation {
        LiveLocation live_location = 1;
        uint64 messageSnowflake = 2;
    }

    repeated ExtendedLiveLocation extended_live_locations = 1;
}

